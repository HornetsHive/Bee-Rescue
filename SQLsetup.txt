-- Tables
create table reports (
	r_id	 	int NOT NULL PRIMARY KEY AUTO_INCREMENT,
    address 	varchar(256), -- Street Address
    email		varchar(256) NOT NULL,
    duration	varchar(256), -- clusters duration clarify where to put time on job?
    location	varchar(256), -- on property 
    height		varchar(256),
    size		varchar(256),
    image 		blob,
    category	enum('normal','utility','emergency'),
    fname		varchar(256),
    lname		varchar(256),
    city		varchar(256),
    p_type		varchar(256), -- property type
    phone_no	varchar(256), -- consider regions  (areacode)-###-####
    weight		int,
    rdate		datetime DEFAULT now(), -- consider UTC time
    active		boolean DEFAULT FALSE, 
    complete	boolean DEFAULT FALSE
);

create table report_tags (
	r_id 				INT NOT NULL,
    need_help 			boolean,
    not_bees			boolean,
    cutout_trapout 		boolean,
    ground				boolean,
    tree				boolean,
    indoor				boolean,
    structure			boolean,
    utility_box			boolean,
    chimney				boolean,
    fence				boolean,
    accident			boolean,
    success 			boolean, -- consider removing, if not successful reports should be abandonded and remade available
    primary key(r_id),
    foreign key(r_id) references reports(r_id)
);

create table BEEKEEPERS (
	bk_id int NOT NULL PRIMARY KEY auto_increment,
    fname varchar(255),
    lname varchar(255),
    email varchar(255),
    phone_no varchar(255),
    address varchar(255),
    city varchar(255),
    zip varchar(255)
);
create table QUALIFICATIONS (
	bk_id int NOT NULL,
    ground_swarms boolean,
    valve_or_water_main boolean,
    shrubs boolean,
    low_tree boolean,
    mid_tree boolean,
    tall_tree boolean,
    fences boolean,
    low_structure boolean,
    mid_structure boolean,
    chimney boolean,
    interior boolean,
    cut_or_trap_out boolean,
    traffic_accidents boolean,
    bucket_w_pole boolean,
    ladder int,
    mechanical_lift boolean,
    primary key(bk_id),
    foreign key(bk_id) references BEEKEEPERS(bk_id)
);
CREATE TABLE active_reports (
	bk_id	int,
	r_id	int,
    PRIMARY KEY(bk_id,r_id),
    foreign key(bk_id) references BEEKEEPERS(bk_id),
    foreign key(r_id) references reports(r_id)
);

CREATE TABLE report_archive (
	r_id		INT, 
    date		date, 
    category	enum('normal','utility','emergency'), 
    r_fname		VARCHAR(256), 
    r_lname		VARCHAR(256), 
    address		VARCHAR(256), 
    city		VARCHAR(256), 
    p_type		VARCHAR(256), 
    location	VARCHAR(256), 
    duration	VARCHAR(256), 
    height		VARCHAR(256), 
    size		VARCHAR(256), 
    weight		VARCHAR(256),
    bk_id		int, 
    bk_fname	VARCHAR(256), 
    bk_lname	VARCHAR(256), 
    need_help	BOOLEAN, 
    success		BOOLEAN
);

-- Triggers
DELIMITER //
create trigger QUALIFICATIONS_INSERT
after insert on Beekeepers
for each row
begin
	insert into QUALIFICATIONS(bk_id, ground_swarms, valve_or_water_main, shrubs, low_tree, mid_tree, tall_tree, fences, low_structure, mid_structure, chimney, interior, cut_or_trap_out, traffic_accidents, bucket_w_pole, ladder, mechanical_lift)
	values(new.bk_id, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
END //
delimiter ;
DELIMITER $
CREATE TRIGGER insertReports 
AFTER INSERT ON reports
FOR EACH ROW
BEGIN
    INSERT INTO report_tags(r_id, need_help, not_bees, cutout_trapout, ground, tree, indoor, structure, utility_box, chimney, fence, accident) values (new.r_id, null, null, null, null, null, null, null, null, null, null, null);  
END$
DELIMITER ;
DELIMITER $
CREATE PROCEDURE one_bk(IN rownum INT, IN rid INT, OUT bkid INT)
BEGIN
	SELECT bk_id into bkid FROM active_reports WHERE r_id = rid LIMIT 1 OFFSET rownum;
END$
DELIMITER ;
-- DATA WARNING THIS WILL DUPLICATE COMPLETED REPORTS INTO ARCHIVE TABLE, DELETE REPORTS TO SAVE SPACE
DELIMITER $
CREATE TRIGGER updateReports 
BEFORE UPDATE ON reports
FOR EACH ROW
BEGIN
	IF new.complete is TRUE THEN 
    -- archive report
			INSERT INTO report_archive(r_id, date, category, r_fname, r_lname, address, city, p_type, location, duration, height, size, weight, bk_id, bk_fname, bk_lname, need_help, success)
            SELECT reports.r_id, curdate(), reports.category, reports.fname, reports.lname, reports.address, reports.city, reports.p_type, reports.location, reports.duration, reports.height, reports.size, reports.weight, active_reports.bk_id, BEEKEEPERS.fname, BEEKEEPERS.lname, report_tags.need_help, report_tags.success
            FROM reports JOIN active_reports ON old.r_id = active_reports.r_id JOIN BEEKEEPERS ON active_reports.bk_id = beekeepers.bk_id JOIN report_tags ON old.r_id = report_tags.r_id
            WHERE reports.r_id = old.r_id;
            DELETE FROM active_reports WHERE r_id = old.r_id;
    END IF;
END$
DELIMITER ;
delimiter $
CREATE TRIGGER deleteReports 
BEFORE DELETE ON reports
FOR EACH ROW
BEGIN
	-- ensure it has been completed aka arkived
	IF old.complete is TRUE THEN
		DELETE FROM report_tags WHERE r_id = old.r_id;
	END IF;
END$
delimiter ;